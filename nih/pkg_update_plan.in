#!/usr/bin/env runawk

#use "power_getopt.awk"
#use "xgetline.awk"
#use "tmpfile.awk"
#use "shquote.awk"
#use "xclose.awk"
#use "xsystem.awk"

#.begin-str help
# Usage: pkg_update_plan <inst_summary> <avail_summary> PKGPATHs...
#.end-str

BEGIN {
	if (ARGC < 2){
		exit 45
	}

	inst_summary  = ARGV [1]
	avail_summary = ARGV [2]

	deps_graph = tmpfile()
}

############################################################
# preparations
BEGIN {
	update_pkgpath_list = ""
	for (i=3; i < ARGC; ++i){
		pkg = ARGV [i] # PKGPATH
		if (pkg ~ /^-/){
			rem_pkgs = rem_pkgs " " substr(pkg, 2)
		}else if (pkg ~ /^[*]/){
			add_auto_pkgs = add_auto_pkgs " " substr(pkg, 2)
			rem_pkgs = rem_pkgs " " substr(pkg, 2)
		}else{
			add_pkgs = add_pkgs " " pkg
			rem_pkgs = rem_pkgs " " pkg
		}
	}
}

############################################################
# converting PKGPATHs of upgraded packages to PKGNAMEs
# BEGIN {
# 	# updatable PKGPATH to PKGNAME
# 	pipe = "pkg_grep_summary -t strlist PKGPATH '" \
# 		update_pkgpath_list "' < " shquote(avail_summary)
# 	while ((pipe | getline) > 0){
# 		if ($0 ~ /^PKGNAME=/){
# 			pkgname = substr($0, 9)
# 		}else if ($0 ~ /^PKGPATH=/){
# 			pkgpath = substr($0, 9)
# 		}else if (NF == 0){
# #			print pkgpath, pkgname
# 			update_pkgpath2pkgname [pkgpath] = pkgname
# 			pkgpath = pkgname = ""
# 		}
# 	}
# 	xclose(pipe)
# }

############################################################
# reading and analysing installed and available summaries
# BEGIN {
# 	auto = 0
# 	while (xgetline0(inst_summary)){
# 		if ($0 ~ /^PKGNAME=/){
# 			pkgname = substr($0, 9)
# 		}else if ($0 ~ /^PKGPATH=/){
# 			pkgpath = substr($0, 9)
# 		}else if ($0 ~ /^automatic=/){
# 			auto = (substr($0, 11) != "")
# 		}else if (NF == 0){
# 			pkgbase = pkgname
# 			sub(/-[^-]*$/, "", pkgbase)
# 			inst_name2base [pkgname] = pkgbase
# 			inst_name2auto [pkgname] = auto
# 			inst_name2path [pkgname] = pkgpath

# 			pkgname = pkgpath = ""
# 			auto = 0
# 		}
# 	}
# 	xclose(inst_summary)

# 	while (xgetline0(avail_summary)){
# 		if ($0 ~ /^PKGNAME=/){
# 			pkgname = substr($0, 9)
# 		}else if ($0 ~ /^PKGPATH=/){
# 			pkgpath = substr($0, 9)
# 		}else if (NF == 0){
# 			pkgbase = pkgname
# 			sub(/-[^-]*$/, "", pkgbase)
# 			avail_name2base [pkgname] = pkgbase
# 			avail_name2path [pkgname] = pkgpath

# 			pkgname = pkgpath = ""
# 		}
# 	}
# 	xclose(avail_summary)
# }

############################################################
function grep_package_cmd (package, field){
	return "pkg_grep_summary -r -fPKGNAME,PKGPATH,DEPENDS,CONFLICTS -t strlist " \
		field " " shquote(package)
}

function rm (file){
	xsystem("rm " shquote(file))
}

BEGIN {
	tmpfn = tmpfile()
	if (rem_pkgs != ""){
		# remove specified packages from inst_summary
		cmd = "pkg_grep_summary -v -t strlist PKGPATH '" rem_pkgs "' < " \
			shquote(inst_summary) \
			" | pkg_grep_summary -v -t strlist PKGNAME '" rem_pkgs "'" \
			" | pkg_grep_summary -v -t strlist PKGBASE '" rem_pkgs "'" \
			" > " tmpfn
		system(cmd)
	}else{
		system("cp " shquote(inst_summary) " " tmpfn)
	}
	inst_summary = tmpfn

	if (add_auto_pkgs != ""){
		# add specified packages as dependencies to inst_summary
		tmpfn = tmpfile()
		cmd = grep_package_cmd(add_auto_pkgs, "PKGBASE")	\
			" < " shquote(avail_summary) " > " tmpfn
		system(cmd)

		cmd = grep_package_cmd(add_auto_pkgs, "PKGPATH")	\
			" < " shquote(avail_summary) " >> " tmpfn
		system(cmd)

		cmd = grep_package_cmd(add_auto_pkgs, "PKGNAME")	\
			" < " shquote(avail_summary) " >> " tmpfn
		system(cmd)

		system("awk 'NF == 0 {print \"automatic=yes\"} {print}' " tmpfn " >> " inst_summary)
		rm(tmpfn)
	}

	if (add_pkgs != ""){
		# add specified packages to inst_summary
		cmd = grep_package_cmd(add_pkgs, "PKGBASE") \
			" < " shquote(avail_summary) " > " tmpfn
		system(cmd)

		cmd = grep_package_cmd(add_pkgs, "PKGPATH") \
			" < " shquote(avail_summary) " >> " tmpfn
		system(cmd)

		cmd = grep_package_cmd(add_pkgs, "PKGNAME") \
			" < " shquote(avail_summary) " >> " tmpfn
		system(cmd)

#		system("cat " tmpfn)

		system("cat " tmpfn " >> " inst_summary)
		rm(tmpfn)
	}
#	system("cat " inst_summary)
}

############################################################
BEGIN {
	tmpfn = tmpfile()
	cmd = "pkg_summary2leaves -vra " inst_summary " > " tmpfn
	system(cmd)
	inst_summary = tmpfn
#	system("cat " inst_summary)
	cmd = "pkg_lint_summary -dcu " inst_summary
#	print cmd
#	pipe = "pkg_summary2deps -ndarR " inst_summary " " avail_summary
#	system(cmd)
#	while(1);
	exitnow(system(cmd))
}
