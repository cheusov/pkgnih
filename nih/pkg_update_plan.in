#!/usr/bin/env runawk

# Copyright (c) 2011, Aleksey Cheusov <vle@gmx.net>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#env "LC_ALL=C"

#use "power_getopt.awk"
#use "xgetline.awk"
#use "tmpfile.awk"
#use "shquote.awk"
#use "xclose.awk"
#use "xsystem.awk"
#use "psu_funcs.awk"
#use "pkgsrc-dewey.awk"

#.begin-str help
# pkg_update_plan tries to resolve dependencies and conflicts and
#    outputs a summary of packages to be on the system after update.
# Usage: pkg_update_plan <inst_summary> <avail_summary> packages...
# OPTIONS:
#   -h        display this help
#   -v        verbose mode
#   -i        obtains packages specifications from stdin
# <packages> may be either PKGBASEs, PKGNAMEs or PKGPATHs,
# optionally appended by `-' (marked for removal),
# `+' (auto-removable), or `_' (auto-removable flag is not changed).
# Packages without suffix will be marked as installed by user.
#.end-str

BEGIN {
	if (getarg("h")){
		print_help()
		exitnow(0)
	}
	verbose_mode = getarg("v")
	from_stdin   = getarg("i")

	if (ARGC < 3 - from_stdin){
		exit 45
	}

	inst_summary  = ARGV [1]
	avail_summary = ARGV [2]
	ARGV [2] = ""
	ARGV [1] = "-"

	inst_deps = tmpfile()
	inst_deps_ok = 0
}

############################################################
# preparations
function process_pkg (pkg,            base,suff,pair,rempair,pipe){
	if (match(pkg, /([-+_]|--)$/)){
		suff = substr(pkg, RSTART)
		base = substr(pkg, 1, RSTART-1)
	}else{
		suff = ""
		base = pkg
	}

	if (base in inst_base2pair){
		rempair = inst_base2pair [base]
	}else if (base in inst_name2pair){
		rempair = inst_name2pair [base]
	}else if (base in inst_path2pair){
		rempair = inst_path2pair [base]
	}else if (match(base, /;/)){
		rempair = pkgname2pkgbase(substr(base,RSTART + 1))
		if (rempair in inst_base2pair)
			rempair = inst_base2pair [rempair]
		else
			rempair = base
	}else if (suff == "-" || suff == "--"){
		print pkg " cannot be found" > "/dev/stderr"
		ex = 1
		return
	}

	if (suff == "--"){
		if (!inst_deps_ok){
			xsystem("pkg_summary2deps -dpnr " inst_summary " > " inst_deps)
			inst_deps_ok = 1
		}
		pipe = "pkg_subgraph_deps -np '" rempair "' < " inst_deps
		while (0 < (pipe | getline pkg)){
			process_pkg(pkg "-")
		}
		return
	}

	if (suff != "-"){
		if (base in avail_base2pair){
			pair = avail_base2pair [base]
		}else if (base in avail_name2pair){
			pair = avail_name2pair [base]
		}else if (base in avail_path2pair){
			pair = avail_path2pair [base]
		}else if (index(base, ";")){
			pair = base
		}else{
			print pkg " cannot be found" > "/dev/stderr"
			ex = 1
		}
	}

	if (ex)
		return

	base = pair
	sub(/^.*;/, "", base)
	base = pkgname2pkgbase(base)

	if (suff == "_"){
		if (!(base in inst_base2auto) || inst_base2auto [base])
			suff = "+"
		else
			suff = ""
	}

	if (suff == "-"){
		rem_pkgs [rempair] = 0
	}else if (suff == "+"){
		if (! (pair in add_pkgs)){
			add_auto_pkgs [pair] = 0
			rem_pkgs [rempair] = 0
			add_base [base] = 0
		}
	}else{
		delete add_auto_pkgs [pair]
		add_pkgs [pair] = 0
		rem_pkgs [rempair] = 0
		add_base [base] = 0
	}
}

function pair2name (pair){
	return substr(pair, index(pair, ";") + 1)
}

############################################################
# reading and analysing installed and available summaries
BEGIN {
	auto = 0
	while (xgetline0(inst_summary)){
		if ($0 ~ /^PKGNAME=/){
			pkgname = substr($0, 9)
		}else if ($0 ~ /^PKGPATH=/){
			pkgpath = substr($0, 9)
		}else if ($0 ~ /^automatic=/){
			auto = (substr($0, 11) != "")
		}else if (NF == 0){
			pkgbase = pkgname
			sub(/-[^-]*$/, "", pkgbase)
			pkgpair = (pkgpath ";" pkgname)

			inst_name2pair [pkgname] = pkgpair
			inst_base2pair [pkgbase] = pkgpair
			inst_path2pair [pkgpath] = pkgpair
			inst_base2auto [pkgbase] = auto

			pkgname = pkgpath = ""
			auto = 0
		}
	}
	xclose(inst_summary)

	while (xgetline0(avail_summary)){
		if ($0 ~ /^PKGNAME=/){
			pkgname = substr($0, 9)
		}else if ($0 ~ /^PKGPATH=/){
			pkgpath = substr($0, 9)
		}else if ($0 ~ /^PROVIDES=/){
			provides_arr [substr($0, 10)] = 1
		}else if (NF == 0){
			pkgbase = pkgname
			sub(/-[^-]*$/, "", pkgbase)
			pkgpair = (pkgpath ";" pkgname)

			if (pkgbase in inst_base2pair){
				instpath = inst_base2pair [pkgbase]
				sub(/;.*/, "", instpath)
			}else{
				instpath = pkgpath
			}

			if (instpath == pkgpath &&
				(! (pkgbase in avail_base2pair) ||
				 pkgname_gt_pkgname(pkgname, pair2name(avail_base2pair [pkgbase]))))
			{
				avail_base2pair [pkgbase] = pkgpair
				avail_path2pair [pkgpath] = pkgpair
			}
			avail_name2pair [pkgname] = pkgpair

			pkgname = pkgpath = ""

			for (i in provides_arr){
				if (! (i in avail_provides)){
					avail_provides [i] = pkgpair
				}else{
					add = 1

					if (!index(avail_provides [i], " ")){
						oldname = pair2name(avail_provides [i])
						oldbase = pkgname2pkgbase(oldname)
						newname = pair2name(pkgpair)
						newbase = pkgname2pkgbase(newname)

						if (newbase == oldbase){
							oldver = pkgname2version(oldname)
							newver = pkgname2version(newname)

							add = 0
							if (newver > oldver)
								avail_provides [i] = pkgpair
						}
					}
					if (add)
						avail_provides [i] = avail_provides [i] " " pkgpair
				}
			}
			delete provides_arr
		}
	}
	xclose(avail_summary)
}

BEGIN {
	update_pkgpath_list = ""
	if (from_stdin){
		while (xgetline0()){
			process_pkg($1)
		}
	}else{
		for (i=(ARGV [3] == "--" ? 4 : 3); i < ARGC; ++i){
			process_pkg(ARGV [i])
		}
	}

	if (ex)
		exitnow(ex)

#	show_progress()
#	exit 13
}

############################################################
function grep_package_cmd (package, field){
	return "pkg_grep_summary -r -fPKGNAME,PKGPATH,DEPENDS,CONFLICTS,COMMENT,BUILD_DATE,REQUIRES,PROVIDES,FILE_NAME -t strlist " \
		field " " shquote(package)
}

function rm (file){
	xsystem("rm " shquote(file))
}

function rem_packages_from_summary (input, output,             pkgs,cmd){
	pkgs = hash_to_indices(rem_pkgs)
	gsub(/;/, ",", pkgs)

	if (pkgs != "")
		# remove specified packages from inst_summary
		cmd = "pkg_grep_summary -v -t strlist PKGPANA '" pkgs "' < "	\
			shquote(input) " > " output
	else
		cmd = ("cp " input " " output)

	system(cmd)
}

function create_packages_summary (output, hash,                  pkgs,cmd)
{
	pkgs = hash_to_indices(hash)
	gsub(/;/, ",", pkgs)

	cmd = grep_package_cmd(pkgs, "PKGPANA") " < " shquote(avail_summary)
	cmd = cmd " | awk 'NF == 0 {print \"force_update=yes\"} {print}'"
	cmd = cmd " > " output
	system(cmd)
}

function hash_to_indices (hash,           i,ret){
	ret = ""
	for (i in hash){
		if (ret == "")
			ret = i
		else
			ret = ret " " i
	}
	return ret
}

function generate_plan (output,           tmpfn,ii,s1)
{
	s1 = tmpfile()
	rem_packages_from_summary(inst_summary, s1)

	for (ii in add_pkgs){
		# add specified packages to inst_summary
		tmpfn = tmpfile()
		create_packages_summary(tmpfn, add_pkgs)

		system("cat " tmpfn " >> " s1)
		rm(tmpfn)
		break
	}

	for (ii in add_auto_pkgs){
		# add specified packages as auto-removable to inst_summary
		tmpfn = tmpfile()
		create_packages_summary(tmpfn, add_auto_pkgs)

		system("awk 'NF == 0 {print \"automatic=yes\"} {print}' " tmpfn " >> " s1)
		rm(tmpfn)
		break
	}

#	cmd = "pkg_uniq_summary " s1 " > " s1 ".tmp; " \
#		"pkg_summary2leaves -vra " s1 ".tmp > " output
	cmd = "pkg_summary2leaves -vra " s1 " > " output
	system(cmd)
	rm(s1)
#	rm(s1 ".tmp")
}

function get_imghash (){
	return length(hash_to_indices(rem_pkgs)) " " length(hash_to_indices(add_pkgs)) " " length(hash_to_indices(add_auto_pkgs))
}

function show_progress (){
	if (verbose_mode){
		printf "    R:%d U:%d A:%d\n", length(rem_pkgs), length(add_pkgs),
			length(add_auto_pkgs) > "/dev/stderr"
		if (verbose_mode > 1){
			printf "rem_pkgs:" > "/dev/stderr"
			for (i in rem_pkgs){
				printf " %s", i > "/dev/stderr"
			}
			printf "\n" > "/dev/stderr"

			printf "add_pkgs:" > "/dev/stderr"
			for (i in add_pkgs){
				printf " %s", i > "/dev/stderr"
			}
			printf "\n" > "/dev/stderr"

			printf "add_auto_pkgs:" > "/dev/stderr"
			for (i in add_auto_pkgs){
				printf " %s", i > "/dev/stderr"
			}
			printf "\n" > "/dev/stderr"

			printf "add_base:" > "/dev/stderr"
			for (i in add_base){
				printf " %s", i > "/dev/stderr"
			}
			printf "\n" > "/dev/stderr"
		}
	}
}

function resolve (flags){
	cmd = "pkg_lint_summary -" flags " " planfn " > " errfn
	if (!system(cmd))
		return 0

	ex = 0
	printf "" > errfn2
	while (xgetline0(errfn)){
		if (verbose_mode > 1)
			print $0 > "/dev/stderr"

		ex2 = 0
		if ($1 == "d:" && $2 == "not_found"){
			dep1 = $3
			sub(/[|].*$/, "", dep1)
			pkgbase = pkgname2pkgbase($6)
			depbase = pkgname2pkgbase(dep1)

			if (! (pkgbase in add_base)){
				addme [pkgbase] = 0
			}else if (! (depbase in add_base)){
				addme [depbase] = 0
			}else{
				ex = ex2 = 1
			}
		}else if ($1 == "c:" && $2 == "conflict"){
			pkgbase = pkgname2pkgbase($8)
			cnfbase = pkgname2pkgbase($5)

			if ((pkgbase in add_base) && !(cnfbase in add_base)){
				addme [cnfbase] = 0
			}else{
				ex = ex2 = 1
			}
		}else if ($1 == "l:" && $2 == "not_found"){
			pkgbase = pkgname2pkgbase($5)

			if (!(pkgbase in add_base)){
				addme [pkgbase] = 0
			}else if (($3 in avail_provides) &&
					  !index(avail_provides [$3], " "))
			{
				addme [avail_provides [$3]] = 0
			}else{
				printf "%s is provided by the following packages: %s\n", $3, avail_provides [$3]
				printf "Select one of them manually\n"
				ex = ex2 = 1
			}
		}else{
			ex = ex2 = 1
		}

		if (ex2)
			print $0 > errfn2
	}
	xclose(errfn)
	close(errfn2)

	return 1
}

BEGIN {
	planfn = tmpfile()
	errfn  = tmpfile()
	errfn2 = tmpfile()

	old_imghash = get_imghash()

	while (1){
		show_progress()

		for (i in add_pkgs){
			assert(!(i in add_auto_pkg))
		}

		generate_plan(planfn)
		if (!resolve("dcu") && !resolve("l"))
			break

		if (ex)
			break

		for (pkg in addme)
			process_pkg(pkg "_")
		delete addme

		new_imghash = get_imghash()
		if (old_imghash == new_imghash){
			break
		}

		old_imghash = new_imghash
	}

	show_progress()

	if (ex){
		system("cat " errfn2)
		if (verbose_mode > 2){
			system("cat " planfn " 1>&2")
		}
		exitnow(1)
	}else{
		exitnow(system("cat " planfn))
	}
}
