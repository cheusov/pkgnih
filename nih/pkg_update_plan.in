#!/usr/bin/env runawk

# Copyright (c) 2010, Aleksey Cheusov <vle@gmx.net>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#env "LC_ALL=C"

#use "power_getopt.awk"
#use "xgetline.awk"
#use "tmpfile.awk"
#use "shquote.awk"
#use "xclose.awk"
#use "xsystem.awk"

#.begin-str help
# Usage: pkg_update_plan <inst_summary> <avail_summary> PKGPATHs...
#.end-str

BEGIN {
	if (ARGC < 3){
		exit 45
	}

	inst_summary  = ARGV [1]
	avail_summary = ARGV [2]

	deps_graph = tmpfile()
}

############################################################
# preparations
BEGIN {
	update_pkgpath_list = ""
	for (i=3; i < ARGC; ++i){
		pkg = ARGV [i] # PKGPATH
		if (pkg ~ /^-/){
			rem_pkgs = rem_pkgs " " substr(pkg, 2)
		}else if (pkg ~ /^[+*]/){
			add_auto_pkgs = add_auto_pkgs " " substr(pkg, 2)
			rem_pkgs = rem_pkgs " " substr(pkg, 2)
		}else{
			add_pkgs = add_pkgs " " pkg
			rem_pkgs = rem_pkgs " " pkg
		}
	}
}

############################################################
# converting PKGPATHs of upgraded packages to PKGNAMEs
# BEGIN {
# 	# updatable PKGPATH to PKGNAME
# 	pipe = "pkg_grep_summary -t strlist PKGPATH '" \
# 		update_pkgpath_list "' < " shquote(avail_summary)
# 	while ((pipe | getline) > 0){
# 		if ($0 ~ /^PKGNAME=/){
# 			pkgname = substr($0, 9)
# 		}else if ($0 ~ /^PKGPATH=/){
# 			pkgpath = substr($0, 9)
# 		}else if (NF == 0){
# #			print pkgpath, pkgname
# 			update_pkgpath2pkgname [pkgpath] = pkgname
# 			pkgpath = pkgname = ""
# 		}
# 	}
# 	xclose(pipe)
# }

############################################################
# reading and analysing installed and available summaries
# BEGIN {
# 	auto = 0
# 	while (xgetline0(inst_summary)){
# 		if ($0 ~ /^PKGNAME=/){
# 			pkgname = substr($0, 9)
# 		}else if ($0 ~ /^PKGPATH=/){
# 			pkgpath = substr($0, 9)
# 		}else if ($0 ~ /^automatic=/){
# 			auto = (substr($0, 11) != "")
# 		}else if (NF == 0){
# 			pkgbase = pkgname
# 			sub(/-[^-]*$/, "", pkgbase)
# 			inst_name2base [pkgname] = pkgbase
# 			inst_name2auto [pkgname] = auto
# 			inst_name2path [pkgname] = pkgpath

# 			pkgname = pkgpath = ""
# 			auto = 0
# 		}
# 	}
# 	xclose(inst_summary)

# 	while (xgetline0(avail_summary)){
# 		if ($0 ~ /^PKGNAME=/){
# 			pkgname = substr($0, 9)
# 		}else if ($0 ~ /^PKGPATH=/){
# 			pkgpath = substr($0, 9)
# 		}else if (NF == 0){
# 			pkgbase = pkgname
# 			sub(/-[^-]*$/, "", pkgbase)
# 			avail_name2base [pkgname] = pkgbase
# 			avail_name2path [pkgname] = pkgpath

# 			pkgname = pkgpath = ""
# 		}
# 	}
# 	xclose(avail_summary)
# }

############################################################
function grep_package_cmd (package, field){
	return "pkg_grep_summary -r -fPKGNAME,PKGPATH,DEPENDS,CONFLICTS,COMMENT -t strlist " \
		field " " shquote(package)
}

function rm (file){
	xsystem("rm " shquote(file))
}

function ensure_pkgs_exist (pkgs, filename,                i,arr,hash,cnt){
	cnt = split(pkgs, arr)
	for (i=1; i <= cnt; ++i){
		hash [arr [i]] = 0
	}

	while (xgetline0(filename)){
		if (/^PKGNAME=/){
			name = substr($0, 9)
			delete hash [name]
			sub(/-[^-]*$/, "", name)
			delete hash [name]
		}else if (/^PKGPATH=/){
			name = substr($0, 9)
			delete hash [name]
		}
	}
	xclose(filename)
 
	for (i in hash){
		if (!failed)
			print "The following packages cannot be found" > "/dev/stderr"
		break
	}
	for (i in hash){
		print "   " i > "/dev/stderr"
	}
	for (i in hash){
		failed = 1
		break
	}
}

BEGIN {
	tmpfn = tmpfile()
	if (rem_pkgs != ""){
		# remove specified packages from inst_summary
		cmd = "pkg_grep_summary -v -t strlist PKGPATH '" rem_pkgs "' < " \
			shquote(inst_summary) \
			" | pkg_grep_summary -v -t strlist PKGNAME '" rem_pkgs "'" \
			" | pkg_grep_summary -v -t strlist PKGBASE '" rem_pkgs "'" \
			" > " tmpfn
		system(cmd)
	}else{
		system("cp " shquote(inst_summary) " " tmpfn)
	}
	inst_summary = tmpfn

	if (add_auto_pkgs != ""){
		# add specified packages as dependencies to inst_summary
		tmpfn = tmpfile()
		cmd = grep_package_cmd(add_auto_pkgs, "PKGBASE")	\
			" < " shquote(avail_summary) " > " tmpfn
		system(cmd)

		cmd = grep_package_cmd(add_auto_pkgs, "PKGPATH")	\
			" < " shquote(avail_summary) " >> " tmpfn
		system(cmd)

		cmd = grep_package_cmd(add_auto_pkgs, "PKGNAME")	\
			" < " shquote(avail_summary) " >> " tmpfn
		system(cmd)

		ensure_pkgs_exist(add_auto_pkgs, tmpfn)

		system("awk 'NF == 0 {print \"automatic=yes\"} {print}' " tmpfn " >> " inst_summary)
		rm(tmpfn)
	}

	if (add_pkgs != ""){
		# add specified packages to inst_summary
		tmpfn = tmpfile()
		cmd = grep_package_cmd(add_pkgs, "PKGBASE")		\
			" < " shquote(avail_summary) " > " tmpfn
		system(cmd)

		cmd = grep_package_cmd(add_pkgs, "PKGPATH") \
			" < " shquote(avail_summary) " >> " tmpfn
		system(cmd)

		cmd = grep_package_cmd(add_pkgs, "PKGNAME") \
			" < " shquote(avail_summary) " >> " tmpfn
		system(cmd)

		ensure_pkgs_exist(add_pkgs, tmpfn)

#		system("cat " tmpfn)

		system("cat " tmpfn " >> " inst_summary)
		rm(tmpfn)
	}
	if (failed)
		exitnow(12)
#	system("cat " inst_summary)
}

############################################################
BEGIN {
	tmpfn = tmpfile()
	cmd = "pkg_summary2leaves -vra " inst_summary " > " tmpfn
	system(cmd)
	inst_summary = tmpfn
#	system("cat " inst_summary)
	cmd = "pkg_lint_summary -dcu " inst_summary
#	print cmd
#	pipe = "pkg_summary2deps -ndarR " inst_summary " " avail_summary
#	system(cmd)
#	while(1);
	ex = system(cmd)
	if (ex)
		exitnow(ex)

	exitnow(system("cat " inst_summary))
}
